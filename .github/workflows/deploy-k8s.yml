name: Deploy to GKE

on:
  push:
    branches:
      - main
    paths:
      - 'k8s/**'
      - '.github/workflows/deploy-k8s.yml'
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types:
      - completed
    branches:
      - main

env:
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  INGRESS_HOST: ${{ secrets.INGRESS_HOST || 'mcp.example.com' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: github-actions@mmn-ai.iam.gserviceaccount.com

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

    - name: Create Neo4j Secret
      run: |
        kubectl create secret generic mcp-credentials \
          --from-literal=NEO4J_USERNAME=neo4j \
          --from-literal=NEO4J_PASSWORD="${{ secrets.NEO4J_PASSWORD }}" \
          --from-literal=NEO4J_AURA_CLIENT_ID="${{ secrets.NEO4J_AURA_CLIENT_ID }}" \
          --from-literal=NEO4J_AURA_CLIENT_SECRET="${{ secrets.NEO4J_AURA_CLIENT_SECRET }}" \
          --namespace=neo4j \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to GKE
      run: |
        cd k8s/overlays/production
        # Replace INGRESS_HOST placeholder with actual value
        if [ -f ingress.yaml ]; then
          sed -i "s/INGRESS_HOST/$INGRESS_HOST/g" ingress.yaml
        fi
        kubectl apply -k .

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/mcp-cypher -n neo4j --timeout=600s
        kubectl rollout status deployment/mcp-memory -n neo4j --timeout=600s
        kubectl rollout status deployment/mcp-modeling -n neo4j --timeout=600s

    - name: Get service status
      run: |
        kubectl get services -n neo4j -l app.kubernetes.io/part-of=neo4j-mcp
        kubectl get ingress -n neo4j